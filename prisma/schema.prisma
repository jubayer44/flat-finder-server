generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  username  String      @unique
  email     String      @unique
  password  String
  status    UserStatus  @default(ACTIVATE)
  role      UserRole    @default(USER)
  flatShare FlatShare[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Flat      Flat[]

  @@map("users")
}

model Flat {
  id          String      @id @default(uuid())
  location    String
  bedrooms    Int
  description String
  rentAmount  Int
  amenities   String?
  photo       String
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  flatShare   FlatShare[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Amenities   Amenities[]
  FlatImage   FlatImage[]

  @@map("flats")
}

model FlatShare {
  id        String            @id @default(uuid())
  flatId    String
  userId    String
  status    FlatRequestStatus @default(PENDING)
  flat      Flat              @relation(fields: [flatId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("flat_shares")
}

model Amenities {
  id     String @id @default(uuid())
  title  String
  flatId String
  flat   Flat   @relation(fields: [flatId], references: [id])

  @@map("amenities")
}

model FlatImage {
  id          String  @id @default(uuid())
  url         String
  flatId      String
  flat        Flat    @relation(fields: [flatId], references: [id])
  flatShareId String?

  @@map("flat_images")
}

enum UserStatus {
  ACTIVATE
  DEACTIVATE
}

enum UserRole {
  USER
  ADMIN
}

enum FlatRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("BookingStatus")
}
